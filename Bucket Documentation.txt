This documentation is for Bucket Version 0.2.8a. It may not be accurate for other versions.

quit: Used to exit the program.
exit: Used to exit the program.
save: This will save code to the 'file.bkt' file. To save there must be more than one line of code.
open: This syntax for 'open' will load code from the 'file.bkt' and will execute everything from it and list it.
add: This can add two numbers together. To use follow the example - "add 1 3" or "add [000] 3" or "add 3 [000]".
sub: This will subtract two numbers. To use follow the example - "sub 2 1" or "sub [000] 3" or "sub 3 [000]" or "sub [000] [001]".
mul: This will multiply two numbers. To use follow the example - "mul 2 1"  or "mul [000] 3" or "mul 3 [000]" or "mul [000] [001]".
div: This will divide two numbers. To use follow the example - "div 2 1"  or "div [000] 3" or "div 3 [000]" or "div [000] [001]".
pour: This prints a string to the screen. To use follow the example - "pour 'hello world'". "pour [000]".
var: This will add a string to a variable. To use follow the example - "var [000] = 'hello world'". "var [000]"
Numbers must be in '' in order to be declared to a var. Like "var [0] = '1'". The math operations will automatically detect if it is a number or not.
The 'var' can now have the result of any math operation equal to it. For example - "var [000] = (add 1 2)".
equal: This will check if two instances are equal. To use follow the example - "equal '1' '1'".
Note: To compare a var to a non var, the non var cannot be passed as a string. "equal [0] hi".
loop: This will run user code a specified amount of times. To use follow the example - "loop 2 {pour 'hello' 1"add 2 3 2"}"
The syntax 'var' now works with loop. Loop cannot loop another loop. Loop will first execute the first given syntax the given amount of times and the the second syntax a given amount of times and so on.
If: The if and else syntax now works. It cannot work with an if statement inside of it.
Note: if and else must be used together, if the two inputs are not equal. "if equal 1 1: pour 'hi'; else: add 3 4;".
Note: Using if inside of an if is buggy currently.
Note: Unable to combine the different math operations.
Note: Capitalization is ignored, including in 'pour'.
Note: pour can now print 'var' syntax or any syntax out.
